---
# Assumptions
#   target_media_location exists on disk
#
# Inputs:
#   target_media_location             Default     /usr/sap/install
#   download_directory
#   bom_name
#   sapbits_location_base_path
#   sapbits_bom_files
#   sapbits_sas_token
#   sapbits_access_key
#   S_user
#   S_password:
#   download_directory:               Default /mnt/downloads
#
# Locals:
#   _bom
#   item
#   result
#
# BOM Fields:
#   download
#   archive
#   permissions
#

#TODO:
# Read the pertinent fields from keyvault

# Steps:
#   01) Register BOM
#   02) Download media
#   03) Upload media

#   01) Register BOM
- name: Run the BOM register
  include_role:
    name: roles-sap/3.3.1-bom-utility
    tasks_from: bom-register
  vars:
    inventory_dir: "{{ download_directory }}/bom"

#------------------<DEBUGGING>-------------------
# - debug:
#     msg:      "Archive: {{ item.archive }} Url: {{ item.url }} Dest: {{ download_directory }}/{{ item.archive }}"
#   loop:       "{{ bom.materials.media|flatten(levels=1) }}"
#   when:       item.url is defined

- name: "BOM: {{ bom_name }} Files without URLS"
  debug:
    msg: "Archive: {{ item.archive }} Dest: {{ download_directory }}/{{ item.archive }}"
  loop: "{{ bom.materials.media|flatten(levels=1) }}"
  when: item.url is not defined

#------------------</DEBUGGING>------------------


# Files to download
#------------------<DEBUGGING>-------------------
# - name: "BOM: {{ bom_name }} Files to download"
#   debug:
#     msg:
#       - "URL: {{ item.url }} Destination: {{ download_directory }}/files/{{ item.archive }}"
#   loop:       "{{ bom.materials.media|flatten(levels=1) }}"
#------------------</DEBUGGING>------------------


#   02) Validate media from SAP
#   Loop through BOM media URLs
- name: "BOM: {{ bom_name }} Check and Download Files"
  get_url:
    url: "{{ item.url }}"
    dest: "{{ download_directory }}/files/{{ item.archive }}"
    tmp_dest: "{{ download_directory }}/tmp"
    url_username: "{{ SUser }}"
    url_password: "{{ SPassword }}"
    force_basic_auth: true
    http_agent: 'SAP Software Download'
  become: true
  become_user: root
  register: result
  until: result is succeeded
  retries: 2
  delay: 1
  loop: "{{ bom.materials.media|flatten(levels=1) }}"
  when: tier != "uploader"


# Files to download
#------------------<DEBUGGING>-------------------
- name: "BOM:{{ bom_name }} Upload files"
  debug:
    msg:
      - "Account: {{ sapbits_location_base_path.rpartition('//')[2].split('.')[0] }} Key: {{ sapbits_access_key }} Container: {{ sapbits_location_base_path.rpartition('//')[2].split('/')[1] }}/{{ sapbits_bom_files }}/archives"
#------------------</DEBUGGING>------------------


#   03) Upload files to Azure
#   Loop through BOM media files
- name: "BOM:{{ bom_name }} Upload files"
  command: >-
    az storage blob upload
      --account-name {{ sapbits_location_base_path.rpartition('//')[2].split('.')[0] }}
      --account-key {{ sapbits_access_key }}
      --container-name {{ sapbits_location_base_path.rpartition('//')[2].split('/')[1] }}/{{ sapbits_bom_files }}/archives
      --name {{ item.archive }}
      --file {{ download_directory }}/files/{{ item.archive }}
      --if-none-match "*"
      --no-progress
  delegate_to: localhost
  register: azresult
  ignore_errors: true
  failed_when: azresult.rc != 0 and azresult.stderr.find("BlobAlreadyExists") == -1
  loop: "{{ bom.materials.media|flatten(levels=1) }}"
  when: item.archive is defined and tier == "uploader"

#------------------<DEBUGGING>-------------------
# - name: "List error codes"
#   debug:
#     var: azresult
#------------------</DEBUGGING>-------------------

# -------------------------------------+---------------------------------------8

...
# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/
